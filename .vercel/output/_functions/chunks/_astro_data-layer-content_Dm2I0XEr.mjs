const _astro_dataLayerContent = [["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.13.7","content-config-digest","9f27691beb6a54e8","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"http://quiachonj.github.io\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"server\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"prefetch\":true,\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":false},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null],\"rehypePlugins\":[[null,{\"themes\":[\"dracula\",\"github-light\"],\"useThemedScrollbars\":false,\"styleOverrides\":{\"uiLineHeight\":\"inherit\",\"codeFontSize\":\"0.875rem\",\"codeLineHeight\":\"1.7142857rem\",\"borderRadius\":\"4px\",\"codePaddingInline\":\"1rem\",\"codeFontFamily\":\"ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \\\"Liberation Mono\\\", \\\"Courier New\\\", monospace;\"}}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false},\"legacy\":{\"collections\":false}}","post",["Map",11,12],"leetcode",{id:11,data:13,body:22,filePath:23,digest:24,rendered:25,legacyId:50},{title:14,description:15,publishDate:16,draft:17,tags:18},"This is the first post of my new Astro blog.","Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et",["Date","2023-12-23T00:00:00.000Z"],false,[19,20,21],"tag1","tag2","tag3","A reddit user asked about this problem. Curious, I tried solving it. From what I learned, this problem is a classic palindrome type. It's deceptively tricky, but rich with optimization opportunities. Here’s my thought, and my approach to the problem.\n\n>Palindromes aren’t just wordplay—they’re a gateway to understanding dynamic programming, two-pointer strategies, and substring manipulation.\n\n## What I Learned, Part 1\n- Palindromes are an odd or an even character count string.\n- Brute forcing it would mean checking each substring. Excruciatingly slow. O(n^3) Complexity.\n- Can also be implemented with a boolean matrix approach. Start from each single character, then check if the doubles are palindromes - and so on... while tagging each matrix x,y entry with a true/false bit if it is found to be a palindrom. O(n^2) Complexity. I was happy but not that convinced.\n\nThen I remembered something from my MSCS days. Manacher's Algorithm.\n\n>The idea is, instead of checking each center naively, Manacher’s algorithm reuses previously computed palindrome information to skip redundant work.\n\n```c# showLineNumbers\n    StringBuilder newString = new(\"#\");\n\n    foreach (char c in s)\n        newString.Append(c).Append('#');\n\n    int length = newString.Length;\n    int[] radii = new int[length];\n    int center = 0;\n    int radius = 0;\n\n    for (int i = 0; i < length; i++)\n    {\n        int mirror = 2 * center - i;\n\n        if (radius > i)\n            radii[i] = Math.Min(radius - i, radii[mirror]);\n\n        while (i + 1 + radii[i] < length && i - 1 - radii[i] >= 0 \n        && newString[i + 1 + radii[i]] == newString[i - 1 - radii[i]])\n            radii[i]++;\n\n        if (i + radii[i] > radius)\n        {\n            center = i;\n            radius = i + radii[i];\n        }\n    }\n```\nAn O(n) approach.\n\n## What I Learned, Part 2\n- Optimization isn’t always about speed. Sometimes it’s about clarity and maintainability.\n- Center expansion is elegant and surprisingly performant.\n- Edge cases (like even-length palindromes) are where most bugs were found. Make sure to check.\n\n## Final Thoughts\nThis problem’s a great reminder that elegant solutions often emerge from pattern recognition, not brute force. This is a gem worth revisiting just to sharpen our DSA problem solving skills.","src/content/post/leetcode.md","e67e810f15e67b69",{html:26,metadata:27},"<p>A reddit user asked about this problem. Curious, I tried solving it. From what I learned, this problem is a classic palindrome type. It’s deceptively tricky, but rich with optimization opportunities. Here’s my thought, and my approach to the problem.</p>\n<blockquote>\n<p>Palindromes aren’t just wordplay—they’re a gateway to understanding dynamic programming, two-pointer strategies, and substring manipulation.</p>\n</blockquote>\n<h2 id=\"what-i-learned-part-1\">What I Learned, Part 1</h2>\n<ul>\n<li>Palindromes are an odd or an even character count string.</li>\n<li>Brute forcing it would mean checking each substring. Excruciatingly slow. O(n^3) Complexity.</li>\n<li>Can also be implemented with a boolean matrix approach. Start from each single character, then check if the doubles are palindromes - and so on… while tagging each matrix x,y entry with a true/false bit if it is found to be a palindrom. O(n^2) Complexity. I was happy but not that convinced.</li>\n</ul>\n<p>Then I remembered something from my MSCS days. Manacher’s Algorithm.</p>\n<blockquote>\n<p>The idea is, instead of checking each center naively, Manacher’s algorithm reuses previously computed palindrome information to skip redundant work.</p>\n</blockquote>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.zrex0.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame\"><figcaption class=\"header\"></figcaption><pre data-language=\"c#\"><code><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#8BE9FD;--0fs:italic;--1:#6F42C1\">StringBuilder</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#F8F8F2;--1:#6F42C1\">newString</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#FF79C6;--1:#BF3441\">=</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#FF79C6;--1:#BF3441\">new</span><span style=\"--0:#F8F8F2;--1:#24292E\">(</span><span style=\"--1:#032F62\"><span style=\"--0:#E9F284\">\"</span><span style=\"--0:#F1FA8C\">#</span><span style=\"--0:#E9F284\">\"</span></span><span style=\"--0:#F8F8F2;--1:#24292E\">);</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#FF79C6;--1:#BF3441\">foreach</span><span style=\"--0:#F8F8F2;--1:#24292E\"> (</span><span style=\"--0:#FF79C6;--1:#BF3441\">char</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#F8F8F2;--1:#6F42C1\">c</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#FF79C6;--1:#BF3441\">in</span><span style=\"--0:#F8F8F2;--1:#24292E\"> s)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#F8F8F2;--1:#24292E\">        </span></span><span style=\"--0:#F8F8F2;--1:#24292E\">newString.</span><span style=\"--0:#50FA7B;--1:#6F42C1\">Append</span><span style=\"--0:#F8F8F2;--1:#24292E\">(c).</span><span style=\"--0:#50FA7B;--1:#6F42C1\">Append</span><span style=\"--0:#F8F8F2;--1:#24292E\">(</span><span style=\"--0:#F1FA8C;--1:#032F62\">'#'</span><span style=\"--0:#F8F8F2;--1:#24292E\">);</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#FF79C6;--1:#BF3441\">int</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#F8F8F2;--1:#6F42C1\">length</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#FF79C6;--1:#BF3441\">=</span><span style=\"--0:#F8F8F2;--1:#24292E\"> newString.Length;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#FF79C6;--1:#BF3441\">int</span><span style=\"--0:#F8F8F2;--1:#24292E\">[] </span><span style=\"--0:#F8F8F2;--1:#6F42C1\">radii</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#FF79C6;--1:#BF3441\">=</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#FF79C6;--1:#BF3441\">new</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#FF79C6;--1:#BF3441\">int</span><span style=\"--0:#F8F8F2;--1:#24292E\">[length];</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#FF79C6;--1:#BF3441\">int</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#F8F8F2;--1:#6F42C1\">center</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#FF79C6;--1:#BF3441\">=</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#BD93F9;--1:#005CC5\">0</span><span style=\"--0:#F8F8F2;--1:#24292E\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#FF79C6;--1:#BF3441\">int</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#F8F8F2;--1:#6F42C1\">radius</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#FF79C6;--1:#BF3441\">=</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#BD93F9;--1:#005CC5\">0</span><span style=\"--0:#F8F8F2;--1:#24292E\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#FF79C6;--1:#BF3441\">for</span><span style=\"--0:#F8F8F2;--1:#24292E\"> (</span><span style=\"--0:#FF79C6;--1:#BF3441\">int</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#F8F8F2;--1:#6F42C1\">i</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#FF79C6;--1:#BF3441\">=</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#BD93F9;--1:#005CC5\">0</span><span style=\"--0:#F8F8F2;--1:#24292E\">; i </span><span style=\"--0:#FF79C6;--1:#BF3441\">&#x3C;</span><span style=\"--0:#F8F8F2;--1:#24292E\"> length; i</span><span style=\"--0:#FF79C6;--1:#BF3441\">++</span><span style=\"--0:#F8F8F2;--1:#24292E\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#F8F8F2;--1:#24292E\">    </span></span><span style=\"--0:#F8F8F2;--1:#24292E\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#FF79C6;--1:#BF3441\">int</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#F8F8F2;--1:#6F42C1\">mirror</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#FF79C6;--1:#BF3441\">=</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#BD93F9;--1:#005CC5\">2</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#FF79C6;--1:#BF3441\">*</span><span style=\"--0:#F8F8F2;--1:#24292E\"> center </span><span style=\"--0:#FF79C6;--1:#BF3441\">-</span><span style=\"--0:#F8F8F2;--1:#24292E\"> i;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#FF79C6;--1:#BF3441\">if</span><span style=\"--0:#F8F8F2;--1:#24292E\"> (radius </span><span style=\"--0:#FF79C6;--1:#BF3441\">></span><span style=\"--0:#F8F8F2;--1:#24292E\"> i)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#F8F8F2;--1:#24292E\">            </span></span><span style=\"--0:#F8F8F2;--1:#24292E\">radii[i] </span><span style=\"--0:#FF79C6;--1:#BF3441\">=</span><span style=\"--0:#F8F8F2;--1:#24292E\"> Math.</span><span style=\"--0:#50FA7B;--1:#6F42C1\">Min</span><span style=\"--0:#F8F8F2;--1:#24292E\">(radius </span><span style=\"--0:#FF79C6;--1:#BF3441\">-</span><span style=\"--0:#F8F8F2;--1:#24292E\"> i, radii[mirror]);</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#FF79C6;--1:#BF3441\">while</span><span style=\"--0:#F8F8F2;--1:#24292E\"> (i </span><span style=\"--0:#FF79C6;--1:#BF3441\">+</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#BD93F9;--1:#005CC5\">1</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#FF79C6;--1:#BF3441\">+</span><span style=\"--0:#F8F8F2;--1:#24292E\"> radii[i] </span><span style=\"--0:#FF79C6;--1:#BF3441\">&#x3C;</span><span style=\"--0:#F8F8F2;--1:#24292E\"> length </span><span style=\"--0:#FF79C6;--1:#BF3441\">&#x26;&#x26;</span><span style=\"--0:#F8F8F2;--1:#24292E\"> i </span><span style=\"--0:#FF79C6;--1:#BF3441\">-</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#BD93F9;--1:#005CC5\">1</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#FF79C6;--1:#BF3441\">-</span><span style=\"--0:#F8F8F2;--1:#24292E\"> radii[i] </span><span style=\"--0:#FF79C6;--1:#BF3441\">>=</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#BD93F9;--1:#005CC5\">0</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#FF79C6;--1:#BF3441\">&#x26;&#x26;</span><span style=\"--0:#F8F8F2;--1:#24292E\"> newString[i </span><span style=\"--0:#FF79C6;--1:#BF3441\">+</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#BD93F9;--1:#005CC5\">1</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#FF79C6;--1:#BF3441\">+</span><span style=\"--0:#F8F8F2;--1:#24292E\"> radii[i]] </span><span style=\"--0:#FF79C6;--1:#BF3441\">==</span><span style=\"--0:#F8F8F2;--1:#24292E\"> newString[i </span><span style=\"--0:#FF79C6;--1:#BF3441\">-</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#BD93F9;--1:#005CC5\">1</span><span style=\"--0:#F8F8F2;--1:#24292E\"> </span><span style=\"--0:#FF79C6;--1:#BF3441\">-</span><span style=\"--0:#F8F8F2;--1:#24292E\"> radii[i]])</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#F8F8F2;--1:#24292E\">            </span></span><span style=\"--0:#F8F8F2;--1:#24292E\">radii[i]</span><span style=\"--0:#FF79C6;--1:#BF3441\">++</span><span style=\"--0:#F8F8F2;--1:#24292E\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#FF79C6;--1:#BF3441\">if</span><span style=\"--0:#F8F8F2;--1:#24292E\"> (i </span><span style=\"--0:#FF79C6;--1:#BF3441\">+</span><span style=\"--0:#F8F8F2;--1:#24292E\"> radii[i] </span><span style=\"--0:#FF79C6;--1:#BF3441\">></span><span style=\"--0:#F8F8F2;--1:#24292E\"> radius)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#F8F8F2;--1:#24292E\">        </span></span><span style=\"--0:#F8F8F2;--1:#24292E\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#F8F8F2;--1:#24292E\">            </span></span><span style=\"--0:#F8F8F2;--1:#24292E\">center </span><span style=\"--0:#FF79C6;--1:#BF3441\">=</span><span style=\"--0:#F8F8F2;--1:#24292E\"> i;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#F8F8F2;--1:#24292E\">            </span></span><span style=\"--0:#F8F8F2;--1:#24292E\">radius </span><span style=\"--0:#FF79C6;--1:#BF3441\">=</span><span style=\"--0:#F8F8F2;--1:#24292E\"> i </span><span style=\"--0:#FF79C6;--1:#BF3441\">+</span><span style=\"--0:#F8F8F2;--1:#24292E\"> radii[i];</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#F8F8F2;--1:#24292E\">        </span></span><span style=\"--0:#F8F8F2;--1:#24292E\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#F8F8F2;--1:#24292E\">    </span></span><span style=\"--0:#F8F8F2;--1:#24292E\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"    StringBuilder newString = new(&#x22;#&#x22;);    foreach (char c in s)        newString.Append(c).Append(&#x27;#&#x27;);    int length = newString.Length;    int[] radii = new int[length];    int center = 0;    int radius = 0;    for (int i = 0; i < length; i++)    {        int mirror = 2 * center - i;        if (radius > i)            radii[i] = Math.Min(radius - i, radii[mirror]);        while (i + 1 + radii[i] < length &#x26;&#x26; i - 1 - radii[i] >= 0        &#x26;&#x26; newString[i + 1 + radii[i]] == newString[i - 1 - radii[i]])            radii[i]++;        if (i + radii[i] > radius)        {            center = i;            radius = i + radii[i];        }    }\"><div></div></button></div></figure></div>\n<p>An O(n) approach.</p>\n<h2 id=\"what-i-learned-part-2\">What I Learned, Part 2</h2>\n<ul>\n<li>Optimization isn’t always about speed. Sometimes it’s about clarity and maintainability.</li>\n<li>Center expansion is elegant and surprisingly performant.</li>\n<li>Edge cases (like even-length palindromes) are where most bugs were found. Make sure to check.</li>\n</ul>\n<h2 id=\"final-thoughts\">Final Thoughts</h2>\n<p>This problem’s a great reminder that elegant solutions often emerge from pattern recognition, not brute force. This is a gem worth revisiting just to sharpen our DSA problem solving skills.</p>",{headings:28,localImagePaths:39,remoteImagePaths:40,frontmatter:41,imagePaths:49},[29,33,36],{depth:30,slug:31,text:32},2,"what-i-learned-part-1","What I Learned, Part 1",{depth:30,slug:34,text:35},"what-i-learned-part-2","What I Learned, Part 2",{depth:30,slug:37,text:38},"final-thoughts","Final Thoughts",[],[],{title:14,publishDate:42,description:15,author:43,excerpt:44,image:45,tags:47,minutesRead:48},["Date","2023-12-23T00:00:00.000Z"],"nicdun","Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et",{src:46,alt:46},null,[19,20,21],"2 min read",[],"leetcode.md"];

export { _astro_dataLayerContent as default };
